version: '3.8'

services:
  # API Gateway
  api-gateway:
    build: ./api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - AUTH_SERVICE_URL=http://auth-service:3001
      - MOVIE_SERVICE_URL=http://movie-service:3002
      - REVIEW_SERVICE_URL=http://review-service:3003
      - NOTIFICATION_SERVICE_URL=http://notification-service:3004
      - JWT_SECRET=${JWT_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
    depends_on:
      - auth-service
      - movie-service
      - review-service
      - notification-service
    restart: unless-stopped
    networks:
      - movielist-network

  # Authentication Service
  auth-service:
    build: ./auth-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - AUTH_DB_URI=mongodb://mongo:27017/movielist-auth
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - mongo
      - rabbitmq
    restart: unless-stopped
    networks:
      - movielist-network

  # Movie Service
  movie-service:
    build: ./movie-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - MOVIE_DB_URI=mongodb://mongo:27017/movielist-movies
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - mongo
      - redis
      - rabbitmq
    restart: unless-stopped
    networks:
      - movielist-network

  # Review Service
  review-service:
    build: ./review-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - REVIEW_DB_URI=mongodb://mongo:27017/movielist-reviews
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - AUTH_SERVICE_URL=http://auth-service:3001
    depends_on:
      - mongo
      - rabbitmq
    restart: unless-stopped
    networks:
      - movielist-network

  # Notification Service
  notification-service:
    build: ./notification-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - NOTIFICATION_DB_URI=mongodb://mongo:27017/movielist-notifications
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    depends_on:
      - mongo
      - rabbitmq
    restart: unless-stopped
    networks:
      - movielist-network

  # MongoDB Database
  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    restart: unless-stopped
    networks:
      - movielist-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - movielist-network

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    networks:
      - movielist-network

  # Nginx Load Balancer (Optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    restart: unless-stopped
    networks:
      - movielist-network

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - movielist-network

  # Grafana for Visualization (Optional)
  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - movielist-network

volumes:
  mongo_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  movielist-network:
    driver: bridge
